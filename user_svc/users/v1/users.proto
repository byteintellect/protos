syntax = "proto3";

package users.v1;

import "commons/v1/commons.proto";
import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";

message UserDto {
  string first_name = 1;
  string last_name = 2;
  commons.v1.Gender gender = 4;
  google.protobuf.Timestamp dob = 5;
  string external_id = 6;
  commons.v1.Relation relation = 7;
  commons.v1.Status status = 8;
}

message IdentityDto {
  commons.v1.IdentityType type = 1;
  string value = 2;
  string external_id = 3;
}

message AddressDto {
  string line_1 = 1;
  string line_2 = 2;
  string city = 3;
  string province = 4;
  string country = 5;
  string zipcode = 6;
  double latitude = 7;
  double longitude = 8;
  string external_id = 9;
}

message CreateUserRequest {
  UserDto request = 1;
}

message CreateUserResponse {
  UserDto response = 1;
}

message UpdateUserRequest {
  string user_id = 1;
  UserDto request = 2;
}

message UpdateUserResponse {
  UserDto response = 1;
}

message GetUserByIdRequest {
  string user_id = 1;
}

message GetUserByIdResponse {
  UserDto response = 1;
}

message BlockUserRequest {
  string user_id = 1;
}

message BlockUserResponse {
  bool status = 1;
}

message CreateUserIdentityRequest{
  string user_id = 1;
  IdentityDto request = 2;
}

message CreateUserIdentityResponse {
  IdentityDto response = 1;
}

message UpdateUserIdentityRequest {
  string user_id = 1;
  string identity_id = 2;
  IdentityDto request = 3;
}

message UpdateUserIdentityResponse {
  IdentityDto response = 1;
}

message CreateUserRelationRequest {
  string primary_user_id = 1;
  UserDto request = 2;
}

message CreateUserRelationResponse {
  UserDto response = 1;
}

message DeleteUserRelationRequest {
  string primary_user_id = 1;
  string relation_id = 2;
}

message DeleteUserRelationResponse {
  bool status = 1;
}

message GetUserRelationsRequest {
  string user_id = 1;
}

message GetUserRelationsResponse {
  repeated UserDto response = 1;
}

message GetUserIdentitiesRequest {
  string user_id = 1;
}

message GetUserIdentitiesResponse {
  repeated IdentityDto response = 1;
}

message CreateUserAddressRequest {
  AddressDto request = 1;
  string user_id = 2;
}

message CreateUserAddressResponse {
  AddressDto response = 1;
}

message UpdateUserAddressRequest {
  AddressDto request = 1;
  string address_id = 2;
  string user_id = 3;
}

message UpdateUserAddressResponse {
  AddressDto response = 1;
}

message GetUserAddressesRequest {
  string user_id = 1;
}

message GetUserAddressesResponse {
  repeated AddressDto response = 1;
}

message GetUserByIdentityRequest {
  commons.v1.IdentityType type = 1;
  string value = 2;
}

service UserService {
  rpc CreateUser(CreateUserRequest) returns (CreateUserResponse) {
    option(google.api.http) = {
      post: "/v1/users"
      body: "*"
    };
  }

  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse){
    option(google.api.http) = {
      patch:"/v1/users/{user_id}"
      body: "request"
    };
  }

  rpc GetUser(GetUserByIdRequest) returns (GetUserByIdResponse){
    option(google.api.http) = {
      get:"/v1/users/{user_id}"
    };
  }

  rpc BlockUser(BlockUserRequest) returns (BlockUserResponse){
    option(google.api.http) = {
      put: "/v1/users/{user_id}/block"
      body: "*"
    };
  }

  rpc CreateUserIdentity(CreateUserIdentityRequest) returns (CreateUserIdentityResponse){
    option(google.api.http) = {
      post:"/v1/users/{user_id}/identities"
      body:"request"
    };
  }

  rpc UpdateUserIdentity(UpdateUserIdentityRequest) returns (UpdateUserIdentityResponse){
    option(google.api.http) = {
      patch:"/v1/users/{user_id}/identities/{identity_id}"
      body:"request"
    };
  }

  rpc GetUserIdentities(GetUserIdentitiesRequest) returns (GetUserIdentitiesResponse){
    option(google.api.http) = {
      get: "/v1/users/{user_id}/identities"
    };
  }

  rpc CreateUserRelation(CreateUserRelationRequest) returns (CreateUserRelationResponse){
    option(google.api.http) = {
      post: "/v1/users/{primary_user_id}/relations"
      body:"request"
    };
  }

  rpc DeleteUserRelation(DeleteUserRelationRequest) returns (DeleteUserRelationResponse){
    option(google.api.http) = {
      delete:"/v1/users/{primary_user_id}/relations/{relation_id}"
    };
  }

  rpc CreateUserAddress(CreateUserAddressRequest) returns (CreateUserAddressResponse){
    option(google.api.http) = {
      post:"/v1/users/{user_id}/addresses"
      body:"request"
    };
  }

  rpc UpdateUserAddress(UpdateUserAddressRequest) returns (UpdateUserAddressResponse){
    option(google.api.http) = {
      patch:"/v1/users/{user_id}/addresses/{address_id}"
      body:"request"
    };
  }

  rpc GetUserAddresses(GetUserAddressesRequest)returns(GetUserAddressesResponse){
    option(google.api.http) = {
      get:"/v1/users/{user_id}/addresses"
    };
  }

  rpc GetUserByIdentity(GetUserByIdentityRequest) returns (CreateUserResponse){
    option(google.api.http) = {
      put: "/v1/users/identities/{type}/{value}"
    };
  }
}
